// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: composable/xcvm/v1beta1/ethereum.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LightClientState struct {
	FinalizedHeader      *BeaconBlockHeader `protobuf:"bytes,1,opt,name=finalized_header,json=finalizedHeader,proto3" json:"finalized_header,omitempty"`
	LatestFinalizedEpoch uint64             `protobuf:"varint,2,opt,name=latest_finalized_epoch,json=latestFinalizedEpoch,proto3" json:"latest_finalized_epoch,omitempty"`
	CurrentSyncCommittee []byte             `protobuf:"bytes,3,opt,name=current_sync_committee,json=currentSyncCommittee,proto3" json:"current_sync_committee,omitempty"`
	NextSyncCommittee    []byte             `protobuf:"bytes,4,opt,name=next_sync_committee,json=nextSyncCommittee,proto3" json:"next_sync_committee,omitempty"`
	StatePeriod          uint64             `protobuf:"varint,5,opt,name=statePeriod,proto3" json:"statePeriod,omitempty"`
}

func (m *LightClientState) Reset()         { *m = LightClientState{} }
func (m *LightClientState) String() string { return proto.CompactTextString(m) }
func (*LightClientState) ProtoMessage()    {}
func (*LightClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f791ac38dedb0bb8, []int{0}
}
func (m *LightClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LightClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LightClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LightClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightClientState.Merge(m, src)
}
func (m *LightClientState) XXX_Size() int {
	return m.Size()
}
func (m *LightClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_LightClientState.DiscardUnknown(m)
}

var xxx_messageInfo_LightClientState proto.InternalMessageInfo

func (m *LightClientState) GetFinalizedHeader() *BeaconBlockHeader {
	if m != nil {
		return m.FinalizedHeader
	}
	return nil
}

func (m *LightClientState) GetLatestFinalizedEpoch() uint64 {
	if m != nil {
		return m.LatestFinalizedEpoch
	}
	return 0
}

func (m *LightClientState) GetCurrentSyncCommittee() []byte {
	if m != nil {
		return m.CurrentSyncCommittee
	}
	return nil
}

func (m *LightClientState) GetNextSyncCommittee() []byte {
	if m != nil {
		return m.NextSyncCommittee
	}
	return nil
}

func (m *LightClientState) GetStatePeriod() uint64 {
	if m != nil {
		return m.StatePeriod
	}
	return 0
}

type ClientState struct {
	Inner          *LightClientState `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	FrozenHeight   []byte            `protobuf:"bytes,2,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty"`
	LatestHeight   uint32            `protobuf:"varint,3,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
	IbcCoreAddress string            `protobuf:"bytes,4,opt,name=ibc_core_address,json=ibcCoreAddress,proto3" json:"ibc_core_address,omitempty"`
	NextUpgradeId  uint64            `protobuf:"varint,5,opt,name=next_upgrade_id,json=nextUpgradeId,proto3" json:"next_upgrade_id,omitempty"`
	XPhantom       []byte            `protobuf:"bytes,6,opt,name=_phantom,json=Phantom,proto3" json:"_phantom,omitempty"`
}

func (m *ClientState) Reset()         { *m = ClientState{} }
func (m *ClientState) String() string { return proto.CompactTextString(m) }
func (*ClientState) ProtoMessage()    {}
func (*ClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f791ac38dedb0bb8, []int{1}
}
func (m *ClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientState.Merge(m, src)
}
func (m *ClientState) XXX_Size() int {
	return m.Size()
}
func (m *ClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientState proto.InternalMessageInfo

func (m *ClientState) GetInner() *LightClientState {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (m *ClientState) GetFrozenHeight() []byte {
	if m != nil {
		return m.FrozenHeight
	}
	return nil
}

func (m *ClientState) GetLatestHeight() uint32 {
	if m != nil {
		return m.LatestHeight
	}
	return 0
}

func (m *ClientState) GetIbcCoreAddress() string {
	if m != nil {
		return m.IbcCoreAddress
	}
	return ""
}

func (m *ClientState) GetNextUpgradeId() uint64 {
	if m != nil {
		return m.NextUpgradeId
	}
	return 0
}

func (m *ClientState) GetXPhantom() []byte {
	if m != nil {
		return m.XPhantom
	}
	return nil
}

type ConsensusState struct {
	// timestamp that corresponds to the block height in which the ConsensusState
	// was stored.
	Time []byte `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// packet commitment root
	Root []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *ConsensusState) Reset()         { *m = ConsensusState{} }
func (m *ConsensusState) String() string { return proto.CompactTextString(m) }
func (*ConsensusState) ProtoMessage()    {}
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f791ac38dedb0bb8, []int{2}
}
func (m *ConsensusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusState.Merge(m, src)
}
func (m *ConsensusState) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusState.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusState proto.InternalMessageInfo

func (m *ConsensusState) GetTime() []byte {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ConsensusState) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

// Eth1Data represents references to the Ethereum 1.x deposit contract.
type Eth1Data struct {
	// The 32 byte deposit tree root for the last deposit included in this
	// block.
	DepositRoot []byte `protobuf:"bytes,1,opt,name=deposit_root,json=depositRoot,proto3" json:"deposit_root,omitempty"`
	// The total number of deposits included in the beacon chain since genesis
	// including the deposits in this block.
	DepositCount uint64 `protobuf:"varint,2,opt,name=deposit_count,json=depositCount,proto3" json:"deposit_count,omitempty"`
	// The 32 byte block hash of the Ethereum 1.x block considered for deposit
	// inclusion.
	BlockHash []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *Eth1Data) Reset()         { *m = Eth1Data{} }
func (m *Eth1Data) String() string { return proto.CompactTextString(m) }
func (*Eth1Data) ProtoMessage()    {}
func (*Eth1Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f791ac38dedb0bb8, []int{3}
}
func (m *Eth1Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Eth1Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Eth1Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Eth1Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Eth1Data.Merge(m, src)
}
func (m *Eth1Data) XXX_Size() int {
	return m.Size()
}
func (m *Eth1Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Eth1Data.DiscardUnknown(m)
}

var xxx_messageInfo_Eth1Data proto.InternalMessageInfo

func (m *Eth1Data) GetDepositRoot() []byte {
	if m != nil {
		return m.DepositRoot
	}
	return nil
}

func (m *Eth1Data) GetDepositCount() uint64 {
	if m != nil {
		return m.DepositCount
	}
	return 0
}

func (m *Eth1Data) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

// A beacon block header is essentially a beacon block with only a reference to
// the beacon body as a 32 byte merkle tree root. This type of message is more
// lightweight than a full beacon block. The message does not contain
// a validator signature.
type BeaconBlockHeader struct {
	// Beacon chain slot that this block represents.
	Slot uint64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	// Validator index of the validator that proposed the block header.
	ProposerIndex uint64 `protobuf:"varint,2,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	// 32 byte merkle tree root of the parent ssz encoded block.
	ParentRoot []byte `protobuf:"bytes,3,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	// 32 byte merkle tree root of the resulting ssz encoded state after processing this block.
	StateRoot []byte `protobuf:"bytes,4,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// 32 byte merkle tree root of the ssz encoded block body.
	BodyRoot []byte `protobuf:"bytes,5,opt,name=body_root,json=bodyRoot,proto3" json:"body_root,omitempty"`
}

func (m *BeaconBlockHeader) Reset()         { *m = BeaconBlockHeader{} }
func (m *BeaconBlockHeader) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockHeader) ProtoMessage()    {}
func (*BeaconBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_f791ac38dedb0bb8, []int{4}
}
func (m *BeaconBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockHeader.Merge(m, src)
}
func (m *BeaconBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockHeader proto.InternalMessageInfo

func (m *BeaconBlockHeader) GetSlot() uint64 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *BeaconBlockHeader) GetProposerIndex() uint64 {
	if m != nil {
		return m.ProposerIndex
	}
	return 0
}

func (m *BeaconBlockHeader) GetParentRoot() []byte {
	if m != nil {
		return m.ParentRoot
	}
	return nil
}

func (m *BeaconBlockHeader) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BeaconBlockHeader) GetBodyRoot() []byte {
	if m != nil {
		return m.BodyRoot
	}
	return nil
}

// The block body of an Ethereum consensus beacon block.
type BeaconBlockBody struct {
	// The validators RANDAO reveal 96 byte value.
	RandaoReveal []byte `protobuf:"bytes,1,opt,name=randao_reveal,json=randaoReveal,proto3" json:"randao_reveal,omitempty"`
	// A reference to the Ethereum 1.x chain.
	Eth1Data *Eth1Data `protobuf:"bytes,2,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	// 32 byte field of arbitrary data. This field may contain any data and
	// is not used for anything other than a fun message.
	Graffiti []byte `protobuf:"bytes,3,opt,name=graffiti,proto3" json:"graffiti,omitempty"`
	// At most MAX_PROPOSER_SLASHINGS.
	ProposerSlashings [][]byte `protobuf:"bytes,4,rep,name=proposer_slashings,json=proposerSlashings,proto3" json:"proposer_slashings,omitempty"`
	// At most MAX_ATTESTER_SLASHINGS.
	AttesterSlashings [][]byte `protobuf:"bytes,5,rep,name=attester_slashings,json=attesterSlashings,proto3" json:"attester_slashings,omitempty"`
	// At most MAX_ATTESTATIONS.
	Attestations [][]byte `protobuf:"bytes,6,rep,name=attestations,proto3" json:"attestations,omitempty"`
	// At most MAX_DEPOSITS.
	Deposits [][]byte `protobuf:"bytes,7,rep,name=deposits,proto3" json:"deposits,omitempty"`
	// At most MAX_VOLUNTARY_EXITS.
	VoluntaryExits [][]byte `protobuf:"bytes,8,rep,name=voluntary_exits,json=voluntaryExits,proto3" json:"voluntary_exits,omitempty"`
}

func (m *BeaconBlockBody) Reset()         { *m = BeaconBlockBody{} }
func (m *BeaconBlockBody) String() string { return proto.CompactTextString(m) }
func (*BeaconBlockBody) ProtoMessage()    {}
func (*BeaconBlockBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_f791ac38dedb0bb8, []int{5}
}
func (m *BeaconBlockBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconBlockBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconBlockBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconBlockBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconBlockBody.Merge(m, src)
}
func (m *BeaconBlockBody) XXX_Size() int {
	return m.Size()
}
func (m *BeaconBlockBody) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconBlockBody.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconBlockBody proto.InternalMessageInfo

func (m *BeaconBlockBody) GetRandaoReveal() []byte {
	if m != nil {
		return m.RandaoReveal
	}
	return nil
}

func (m *BeaconBlockBody) GetEth1Data() *Eth1Data {
	if m != nil {
		return m.Eth1Data
	}
	return nil
}

func (m *BeaconBlockBody) GetGraffiti() []byte {
	if m != nil {
		return m.Graffiti
	}
	return nil
}

func (m *BeaconBlockBody) GetProposerSlashings() [][]byte {
	if m != nil {
		return m.ProposerSlashings
	}
	return nil
}

func (m *BeaconBlockBody) GetAttesterSlashings() [][]byte {
	if m != nil {
		return m.AttesterSlashings
	}
	return nil
}

func (m *BeaconBlockBody) GetAttestations() [][]byte {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *BeaconBlockBody) GetDeposits() [][]byte {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *BeaconBlockBody) GetVoluntaryExits() [][]byte {
	if m != nil {
		return m.VoluntaryExits
	}
	return nil
}

func init() {
	proto.RegisterType((*LightClientState)(nil), "composable.xcvm.v1beta1.LightClientState")
	proto.RegisterType((*ClientState)(nil), "composable.xcvm.v1beta1.ClientState")
	proto.RegisterType((*ConsensusState)(nil), "composable.xcvm.v1beta1.ConsensusState")
	proto.RegisterType((*Eth1Data)(nil), "composable.xcvm.v1beta1.Eth1Data")
	proto.RegisterType((*BeaconBlockHeader)(nil), "composable.xcvm.v1beta1.BeaconBlockHeader")
	proto.RegisterType((*BeaconBlockBody)(nil), "composable.xcvm.v1beta1.BeaconBlockBody")
}

func init() {
	proto.RegisterFile("composable/xcvm/v1beta1/ethereum.proto", fileDescriptor_f791ac38dedb0bb8)
}

var fileDescriptor_f791ac38dedb0bb8 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0xeb, 0x6c, 0xd2, 0x4d, 0x26, 0x4e, 0xd2, 0x1d, 0x2a, 0xc8, 0x16, 0x6d, 0x36, 0x1b,
	0x44, 0x09, 0x48, 0x24, 0xca, 0xc2, 0x81, 0x13, 0x88, 0x84, 0xa2, 0xae, 0xc4, 0x61, 0xe5, 0x6a,
	0x2f, 0x5c, 0xac, 0xb1, 0xfd, 0x62, 0x8f, 0xb0, 0xe7, 0x99, 0x99, 0x49, 0x94, 0xec, 0x9d, 0x3b,
	0xdf, 0x82, 0x03, 0x5f, 0x84, 0xe3, 0x1e, 0xe1, 0x86, 0xda, 0x2f, 0x82, 0x66, 0xc6, 0x4e, 0x5b,
	0x56, 0xbd, 0xcd, 0xfc, 0xfe, 0xff, 0x17, 0xbf, 0xf7, 0xf7, 0x8b, 0xc9, 0x79, 0x8c, 0x45, 0x89,
	0x8a, 0x45, 0x39, 0xcc, 0x77, 0xf1, 0xb6, 0x98, 0x6f, 0x17, 0x11, 0x68, 0xb6, 0x98, 0x83, 0xce,
	0x40, 0xc2, 0xa6, 0x98, 0x95, 0x12, 0x35, 0xd2, 0x8f, 0x6e, 0x7d, 0x33, 0xe3, 0x9b, 0x55, 0xbe,
	0xb3, 0xa7, 0x31, 0xaa, 0x02, 0x55, 0x68, 0x6d, 0x73, 0x77, 0x71, 0x35, 0x67, 0xa7, 0x29, 0xa6,
	0xe8, 0xb8, 0x39, 0x55, 0xf4, 0x79, 0x8a, 0x98, 0xe6, 0x30, 0xb7, 0xb7, 0x68, 0xb3, 0x9e, 0x6b,
	0x5e, 0x80, 0xd2, 0xac, 0x28, 0x9d, 0x61, 0xf2, 0x47, 0x83, 0x9c, 0xfc, 0xc4, 0xd3, 0x4c, 0xaf,
	0x72, 0x0e, 0x42, 0x5f, 0x69, 0xa6, 0x81, 0xbe, 0x21, 0x27, 0x6b, 0x2e, 0x58, 0xce, 0xdf, 0x42,
	0x12, 0x66, 0xc0, 0x12, 0x90, 0x43, 0x6f, 0xec, 0x4d, 0xbb, 0x2f, 0xbf, 0x98, 0x3d, 0xd0, 0xda,
	0x6c, 0x09, 0x2c, 0x46, 0xb1, 0xcc, 0x31, 0xfe, 0xe5, 0xd2, 0x56, 0x04, 0x83, 0xc3, 0x6f, 0x38,
	0x40, 0xbf, 0x26, 0x1f, 0xe6, 0x4c, 0x83, 0xd2, 0xe1, 0xed, 0xaf, 0x43, 0x89, 0x71, 0x36, 0x6c,
	0x8c, 0xbd, 0x69, 0x33, 0x38, 0x75, 0xea, 0x8f, 0xb5, 0x78, 0x61, 0x34, 0x53, 0x15, 0x6f, 0xa4,
	0x04, 0xa1, 0x43, 0xb5, 0x17, 0x71, 0x18, 0x63, 0x51, 0x70, 0xad, 0x01, 0x86, 0x8f, 0xc6, 0xde,
	0xd4, 0x0f, 0x4e, 0x2b, 0xf5, 0x6a, 0x2f, 0xe2, 0x55, 0xad, 0xd1, 0x19, 0xf9, 0x40, 0xc0, 0xee,
	0xbd, 0x92, 0xa6, 0x2d, 0x79, 0x62, 0xa4, 0xfb, 0xfe, 0x31, 0xe9, 0x2a, 0x33, 0xfb, 0x6b, 0x90,
	0x1c, 0x93, 0x61, 0xcb, 0x36, 0x74, 0x17, 0x4d, 0x7e, 0x6b, 0x90, 0xee, 0xdd, 0x90, 0xbe, 0x23,
	0x2d, 0x2e, 0xc4, 0x21, 0x99, 0xcf, 0x1f, 0x4c, 0xe6, 0xff, 0xf1, 0x06, 0xae, 0x8e, 0x7e, 0x42,
	0x7a, 0x6b, 0x89, 0x6f, 0x41, 0x84, 0x19, 0x18, 0x8b, 0x4d, 0xc1, 0x0f, 0x7c, 0x07, 0x2f, 0x2d,
	0x33, 0xa6, 0x2a, 0xb3, 0xca, 0x64, 0x86, 0xee, 0x05, 0xbe, 0x83, 0x95, 0x69, 0x4a, 0x4e, 0x78,
	0x64, 0xc6, 0x94, 0x10, 0xb2, 0x24, 0x91, 0xa0, 0x94, 0x9d, 0xb4, 0x13, 0xf4, 0x79, 0x14, 0xaf,
	0x50, 0xc2, 0xf7, 0x8e, 0xd2, 0x73, 0x32, 0xb0, 0xb1, 0x6c, 0xca, 0x54, 0xb2, 0x04, 0x42, 0x5e,
	0x8f, 0xda, 0x33, 0xf8, 0x8d, 0xa3, 0xaf, 0x12, 0xfa, 0x94, 0xb4, 0xc3, 0x32, 0x63, 0x42, 0x63,
	0x31, 0x3c, 0xb6, 0x6d, 0x3d, 0x7e, 0xed, 0xae, 0x93, 0x6f, 0x48, 0x7f, 0x85, 0x42, 0x81, 0x50,
	0x1b, 0xe5, 0x92, 0xa0, 0xa4, 0x69, 0xd6, 0xca, 0x06, 0xe1, 0x07, 0xf6, 0x6c, 0x98, 0x44, 0xac,
	0x67, 0xb2, 0xe7, 0xc9, 0xaf, 0xa4, 0x7d, 0xa1, 0xb3, 0xc5, 0x0f, 0x4c, 0x33, 0xfa, 0x82, 0xf8,
	0x09, 0x94, 0xa8, 0xb8, 0x0e, 0xad, 0xcf, 0xd5, 0x76, 0x2b, 0x16, 0x20, 0xda, 0xd1, 0x6b, 0x4b,
	0x8c, 0x1b, 0xa1, 0xab, 0x2d, 0xa9, 0xeb, 0x56, 0x86, 0xd1, 0x67, 0x84, 0x44, 0x66, 0xe7, 0xc2,
	0x8c, 0xa9, 0xac, 0xda, 0x88, 0x8e, 0x25, 0x97, 0x4c, 0x65, 0x93, 0x3f, 0x3d, 0xf2, 0xe4, 0xbd,
	0xcd, 0x34, 0xcd, 0xa9, 0xbc, 0x7a, 0x68, 0x33, 0xb0, 0x67, 0xfa, 0x29, 0xe9, 0x97, 0x12, 0x4b,
	0x54, 0x20, 0x43, 0x2e, 0x12, 0xd8, 0x55, 0x8f, 0xeb, 0xd5, 0xf4, 0x95, 0x81, 0xf4, 0x39, 0xe9,
	0x96, 0xcc, 0x2e, 0xa3, 0x6d, 0xdb, 0x3d, 0x90, 0x38, 0x64, 0xbb, 0x7e, 0x46, 0x88, 0xdd, 0x1a,
	0xa7, 0xbb, 0x7d, 0xeb, 0x58, 0x62, 0xe5, 0x8f, 0x49, 0x27, 0xc2, 0x64, 0xef, 0xd4, 0x96, 0x55,
	0xdb, 0x06, 0x18, 0x71, 0xf2, 0x4f, 0x83, 0x0c, 0xee, 0x74, 0xbb, 0xc4, 0x64, 0x6f, 0x52, 0x90,
	0x4c, 0x24, 0x0c, 0x43, 0x09, 0x5b, 0x60, 0x79, 0x95, 0x94, 0xef, 0x60, 0x60, 0x19, 0xfd, 0x96,
	0x74, 0x40, 0x67, 0x8b, 0x30, 0x61, 0x9a, 0xd9, 0xbe, 0xbb, 0x2f, 0x5f, 0x3c, 0xb8, 0x8f, 0xf5,
	0x3b, 0x08, 0xda, 0x50, 0xbf, 0x8d, 0x33, 0xd2, 0x4e, 0x25, 0x5b, 0xaf, 0xb9, 0xe6, 0xd5, 0x48,
	0x87, 0x3b, 0xfd, 0x92, 0xd0, 0x43, 0x30, 0x2a, 0x67, 0x2a, 0xe3, 0x22, 0x35, 0xeb, 0xf5, 0xc8,
	0xfc, 0x91, 0x6a, 0xe5, 0xaa, 0x16, 0x8c, 0x9d, 0x69, 0xb3, 0x9b, 0xf7, 0xec, 0x2d, 0x67, 0xaf,
	0x95, 0x5b, 0xfb, 0x84, 0xf8, 0x0e, 0x32, 0xcd, 0x51, 0xa8, 0xe1, 0xb1, 0x35, 0xde, 0x63, 0xa6,
	0xbb, 0xea, 0x9d, 0xab, 0xe1, 0x63, 0xab, 0x1f, 0xee, 0xf4, 0x33, 0x32, 0xd8, 0x62, 0xbe, 0x11,
	0x9a, 0xc9, 0x7d, 0x08, 0x3b, 0x63, 0x69, 0x5b, 0x4b, 0xff, 0x80, 0x2f, 0x0c, 0x5d, 0x9e, 0xff,
	0x75, 0x3d, 0xf2, 0xde, 0x5d, 0x8f, 0xbc, 0x7f, 0xaf, 0x47, 0xde, 0xef, 0x37, 0xa3, 0xa3, 0x77,
	0x37, 0xa3, 0xa3, 0xbf, 0x6f, 0x46, 0x47, 0x3f, 0xfb, 0x3b, 0xf7, 0x31, 0xd6, 0xfb, 0x12, 0x54,
	0x74, 0x6c, 0xbf, 0x8b, 0x5f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x9e, 0xab, 0x8c, 0x00, 0xac,
	0x05, 0x00, 0x00,
}

func (m *LightClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LightClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LightClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatePeriod != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.StatePeriod))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NextSyncCommittee) > 0 {
		i -= len(m.NextSyncCommittee)
		copy(dAtA[i:], m.NextSyncCommittee)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.NextSyncCommittee)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CurrentSyncCommittee) > 0 {
		i -= len(m.CurrentSyncCommittee)
		copy(dAtA[i:], m.CurrentSyncCommittee)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.CurrentSyncCommittee)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LatestFinalizedEpoch != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.LatestFinalizedEpoch))
		i--
		dAtA[i] = 0x10
	}
	if m.FinalizedHeader != nil {
		{
			size, err := m.FinalizedHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XPhantom) > 0 {
		i -= len(m.XPhantom)
		copy(dAtA[i:], m.XPhantom)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.XPhantom)))
		i--
		dAtA[i] = 0x32
	}
	if m.NextUpgradeId != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.NextUpgradeId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.IbcCoreAddress) > 0 {
		i -= len(m.IbcCoreAddress)
		copy(dAtA[i:], m.IbcCoreAddress)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.IbcCoreAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.LatestHeight != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.LatestHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FrozenHeight) > 0 {
		i -= len(m.FrozenHeight)
		copy(dAtA[i:], m.FrozenHeight)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.FrozenHeight)))
		i--
		dAtA[i] = 0x12
	}
	if m.Inner != nil {
		{
			size, err := m.Inner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Eth1Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Eth1Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Eth1Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DepositCount != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.DepositCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DepositRoot) > 0 {
		i -= len(m.DepositRoot)
		copy(dAtA[i:], m.DepositRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.DepositRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeaconBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BodyRoot) > 0 {
		i -= len(m.BodyRoot)
		copy(dAtA[i:], m.BodyRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.BodyRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentRoot) > 0 {
		i -= len(m.ParentRoot)
		copy(dAtA[i:], m.ParentRoot)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.ParentRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProposerIndex != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.ProposerIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Slot != 0 {
		i = encodeVarintEthereum(dAtA, i, uint64(m.Slot))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BeaconBlockBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconBlockBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconBlockBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoluntaryExits) > 0 {
		for iNdEx := len(m.VoluntaryExits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoluntaryExits[iNdEx])
			copy(dAtA[i:], m.VoluntaryExits[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.VoluntaryExits[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Deposits[iNdEx])
			copy(dAtA[i:], m.Deposits[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.Deposits[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Attestations[iNdEx])
			copy(dAtA[i:], m.Attestations[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.Attestations[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AttesterSlashings) > 0 {
		for iNdEx := len(m.AttesterSlashings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AttesterSlashings[iNdEx])
			copy(dAtA[i:], m.AttesterSlashings[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.AttesterSlashings[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ProposerSlashings) > 0 {
		for iNdEx := len(m.ProposerSlashings) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProposerSlashings[iNdEx])
			copy(dAtA[i:], m.ProposerSlashings[iNdEx])
			i = encodeVarintEthereum(dAtA, i, uint64(len(m.ProposerSlashings[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Graffiti) > 0 {
		i -= len(m.Graffiti)
		copy(dAtA[i:], m.Graffiti)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.Graffiti)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Eth1Data != nil {
		{
			size, err := m.Eth1Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEthereum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RandaoReveal) > 0 {
		i -= len(m.RandaoReveal)
		copy(dAtA[i:], m.RandaoReveal)
		i = encodeVarintEthereum(dAtA, i, uint64(len(m.RandaoReveal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEthereum(dAtA []byte, offset int, v uint64) int {
	offset -= sovEthereum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LightClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FinalizedHeader != nil {
		l = m.FinalizedHeader.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.LatestFinalizedEpoch != 0 {
		n += 1 + sovEthereum(uint64(m.LatestFinalizedEpoch))
	}
	l = len(m.CurrentSyncCommittee)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.NextSyncCommittee)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.StatePeriod != 0 {
		n += 1 + sovEthereum(uint64(m.StatePeriod))
	}
	return n
}

func (m *ClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inner != nil {
		l = m.Inner.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.FrozenHeight)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.LatestHeight != 0 {
		n += 1 + sovEthereum(uint64(m.LatestHeight))
	}
	l = len(m.IbcCoreAddress)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.NextUpgradeId != 0 {
		n += 1 + sovEthereum(uint64(m.NextUpgradeId))
	}
	l = len(m.XPhantom)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func (m *ConsensusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func (m *Eth1Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.DepositCount != 0 {
		n += 1 + sovEthereum(uint64(m.DepositCount))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func (m *BeaconBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovEthereum(uint64(m.Slot))
	}
	if m.ProposerIndex != 0 {
		n += 1 + sovEthereum(uint64(m.ProposerIndex))
	}
	l = len(m.ParentRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.BodyRoot)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	return n
}

func (m *BeaconBlockBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RandaoReveal)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if m.Eth1Data != nil {
		l = m.Eth1Data.Size()
		n += 1 + l + sovEthereum(uint64(l))
	}
	l = len(m.Graffiti)
	if l > 0 {
		n += 1 + l + sovEthereum(uint64(l))
	}
	if len(m.ProposerSlashings) > 0 {
		for _, b := range m.ProposerSlashings {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	if len(m.AttesterSlashings) > 0 {
		for _, b := range m.AttesterSlashings {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	if len(m.Attestations) > 0 {
		for _, b := range m.Attestations {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	if len(m.Deposits) > 0 {
		for _, b := range m.Deposits {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	if len(m.VoluntaryExits) > 0 {
		for _, b := range m.VoluntaryExits {
			l = len(b)
			n += 1 + l + sovEthereum(uint64(l))
		}
	}
	return n
}

func sovEthereum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEthereum(x uint64) (n int) {
	return sovEthereum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LightClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LightClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LightClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalizedHeader == nil {
				m.FinalizedHeader = &BeaconBlockHeader{}
			}
			if err := m.FinalizedHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestFinalizedEpoch", wireType)
			}
			m.LatestFinalizedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestFinalizedEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSyncCommittee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSyncCommittee = append(m.CurrentSyncCommittee[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentSyncCommittee == nil {
				m.CurrentSyncCommittee = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSyncCommittee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextSyncCommittee = append(m.NextSyncCommittee[:0], dAtA[iNdEx:postIndex]...)
			if m.NextSyncCommittee == nil {
				m.NextSyncCommittee = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatePeriod", wireType)
			}
			m.StatePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inner == nil {
				m.Inner = &LightClientState{}
			}
			if err := m.Inner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenHeight", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrozenHeight = append(m.FrozenHeight[:0], dAtA[iNdEx:postIndex]...)
			if m.FrozenHeight == nil {
				m.FrozenHeight = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			m.LatestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcCoreAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcCoreAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextUpgradeId", wireType)
			}
			m.NextUpgradeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextUpgradeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XPhantom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XPhantom = append(m.XPhantom[:0], dAtA[iNdEx:postIndex]...)
			if m.XPhantom == nil {
				m.XPhantom = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = append(m.Time[:0], dAtA[iNdEx:postIndex]...)
			if m.Time == nil {
				m.Time = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Eth1Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Eth1Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Eth1Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositRoot = append(m.DepositRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.DepositRoot == nil {
				m.DepositRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCount", wireType)
			}
			m.DepositCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerIndex", wireType)
			}
			m.ProposerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRoot = append(m.ParentRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentRoot == nil {
				m.ParentRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BodyRoot = append(m.BodyRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BodyRoot == nil {
				m.BodyRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconBlockBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconBlockBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconBlockBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandaoReveal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandaoReveal = append(m.RandaoReveal[:0], dAtA[iNdEx:postIndex]...)
			if m.RandaoReveal == nil {
				m.RandaoReveal = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eth1Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eth1Data == nil {
				m.Eth1Data = &Eth1Data{}
			}
			if err := m.Eth1Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Graffiti", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Graffiti = append(m.Graffiti[:0], dAtA[iNdEx:postIndex]...)
			if m.Graffiti == nil {
				m.Graffiti = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerSlashings", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerSlashings = append(m.ProposerSlashings, make([]byte, postIndex-iNdEx))
			copy(m.ProposerSlashings[len(m.ProposerSlashings)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttesterSlashings", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttesterSlashings = append(m.AttesterSlashings, make([]byte, postIndex-iNdEx))
			copy(m.AttesterSlashings[len(m.AttesterSlashings)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, make([]byte, postIndex-iNdEx))
			copy(m.Attestations[len(m.Attestations)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, make([]byte, postIndex-iNdEx))
			copy(m.Deposits[len(m.Deposits)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoluntaryExits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEthereum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoluntaryExits = append(m.VoluntaryExits, make([]byte, postIndex-iNdEx))
			copy(m.VoluntaryExits[len(m.VoluntaryExits)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEthereum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEthereum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthereum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthereum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEthereum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEthereum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEthereum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEthereum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthereum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEthereum = fmt.Errorf("proto: unexpected end of group")
)
