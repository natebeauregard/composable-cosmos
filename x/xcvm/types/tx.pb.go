// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: composable/xcvm/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSendTransferIntent represents a message to send a transfer intent.
type MsgSendTransferIntent struct {
	// The origin composable address of the transfer intent.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// The destination EVM chain address for the transfer intent.
	DestinationAddress string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	// The IBC light client ID for the EVM chain to execute the transfer intent on.
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The block height timeout for the transfer intent. The transfer intent can be released and the bounty can be returned to the sender after this height.
	TimeoutHeight int64 `protobuf:"varint,4,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	// The tokens to transfer to the destination address.
	TransferTokens *TransferTokens `protobuf:"bytes,5,opt,name=transfer_tokens,json=transferTokens,proto3" json:"transfer_tokens,omitempty"`
	// The bounty to post for incentivizing solvers to execute the transfer intent.
	Bounty github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=bounty,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bounty"`
}

func (m *MsgSendTransferIntent) Reset()         { *m = MsgSendTransferIntent{} }
func (m *MsgSendTransferIntent) String() string { return proto.CompactTextString(m) }
func (*MsgSendTransferIntent) ProtoMessage()    {}
func (*MsgSendTransferIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0c0bfb695dacb5, []int{0}
}
func (m *MsgSendTransferIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendTransferIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendTransferIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendTransferIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendTransferIntent.Merge(m, src)
}
func (m *MsgSendTransferIntent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendTransferIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendTransferIntent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendTransferIntent proto.InternalMessageInfo

func (m *MsgSendTransferIntent) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendTransferIntent) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *MsgSendTransferIntent) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *MsgSendTransferIntent) GetTimeoutHeight() int64 {
	if m != nil {
		return m.TimeoutHeight
	}
	return 0
}

func (m *MsgSendTransferIntent) GetTransferTokens() *TransferTokens {
	if m != nil {
		return m.TransferTokens
	}
	return nil
}

// MsgSendTransferIntentResponse is the response type for the Msg/SendTransferIntent RPC method.
type MsgSendTransferIntentResponse struct {
}

func (m *MsgSendTransferIntentResponse) Reset()         { *m = MsgSendTransferIntentResponse{} }
func (m *MsgSendTransferIntentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendTransferIntentResponse) ProtoMessage()    {}
func (*MsgSendTransferIntentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0c0bfb695dacb5, []int{1}
}
func (m *MsgSendTransferIntentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendTransferIntentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendTransferIntentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendTransferIntentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendTransferIntentResponse.Merge(m, src)
}
func (m *MsgSendTransferIntentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendTransferIntentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendTransferIntentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendTransferIntentResponse proto.InternalMessageInfo

// MsgVerifyTransferIntentProof represents a message to send a proof to verify
// the successful execution of a transfer intent.
type MsgVerifyTransferIntentProof struct {
	// The signer address of the transfer intent proof to verify.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Unique id of the intent to verify the proof for
	IntentId uint64 `protobuf:"varint,2,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// the transaction receipt containing the transfer intent execution.
	TxReceipt []byte `protobuf:"bytes,3,opt,name=tx_receipt,json=txReceipt,proto3" json:"tx_receipt,omitempty"`
	// the signature of the receipt hash and block hash containing the transfer intent execution.
	ReceiptSignature []byte `protobuf:"bytes,4,opt,name=receipt_signature,json=receiptSignature,proto3" json:"receipt_signature,omitempty"`
	// the public key of the solver executing the transfer intent.
	PublicKey []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// the execution block header of the block containing the transfer intent execution.
	BlockHeader []byte `protobuf:"bytes,6,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	// the proof of the receipt in the block.
	ReceiptProof []byte `protobuf:"bytes,7,opt,name=receipt_proof,json=receiptProof,proto3" json:"receipt_proof,omitempty"`
	// the body of the beacon block containing the transfer intent execution.
	BeaconBlockBody []byte `protobuf:"bytes,8,opt,name=beacon_block_body,json=beaconBlockBody,proto3" json:"beacon_block_body,omitempty"`
	// all beacon block headers from the block where the transfer intent was executed up to block in the current light client state.
	BeaconBlockHeaders []*BeaconBlockHeader `protobuf:"bytes,9,rep,name=beacon_block_headers,json=beaconBlockHeaders,proto3" json:"beacon_block_headers,omitempty"`
}

func (m *MsgVerifyTransferIntentProof) Reset()         { *m = MsgVerifyTransferIntentProof{} }
func (m *MsgVerifyTransferIntentProof) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyTransferIntentProof) ProtoMessage()    {}
func (*MsgVerifyTransferIntentProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0c0bfb695dacb5, []int{2}
}
func (m *MsgVerifyTransferIntentProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyTransferIntentProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyTransferIntentProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyTransferIntentProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyTransferIntentProof.Merge(m, src)
}
func (m *MsgVerifyTransferIntentProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyTransferIntentProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyTransferIntentProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyTransferIntentProof proto.InternalMessageInfo

func (m *MsgVerifyTransferIntentProof) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgVerifyTransferIntentProof) GetIntentId() uint64 {
	if m != nil {
		return m.IntentId
	}
	return 0
}

func (m *MsgVerifyTransferIntentProof) GetTxReceipt() []byte {
	if m != nil {
		return m.TxReceipt
	}
	return nil
}

func (m *MsgVerifyTransferIntentProof) GetReceiptSignature() []byte {
	if m != nil {
		return m.ReceiptSignature
	}
	return nil
}

func (m *MsgVerifyTransferIntentProof) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *MsgVerifyTransferIntentProof) GetBlockHeader() []byte {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *MsgVerifyTransferIntentProof) GetReceiptProof() []byte {
	if m != nil {
		return m.ReceiptProof
	}
	return nil
}

func (m *MsgVerifyTransferIntentProof) GetBeaconBlockBody() []byte {
	if m != nil {
		return m.BeaconBlockBody
	}
	return nil
}

func (m *MsgVerifyTransferIntentProof) GetBeaconBlockHeaders() []*BeaconBlockHeader {
	if m != nil {
		return m.BeaconBlockHeaders
	}
	return nil
}

// MsgVerifyTransferIntentProofResponse is the response type for the Msg/MsgVerifyTransferIntentProof RPC method.
type MsgVerifyTransferIntentProofResponse struct {
}

func (m *MsgVerifyTransferIntentProofResponse) Reset()         { *m = MsgVerifyTransferIntentProofResponse{} }
func (m *MsgVerifyTransferIntentProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVerifyTransferIntentProofResponse) ProtoMessage()    {}
func (*MsgVerifyTransferIntentProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0c0bfb695dacb5, []int{3}
}
func (m *MsgVerifyTransferIntentProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVerifyTransferIntentProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVerifyTransferIntentProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVerifyTransferIntentProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVerifyTransferIntentProofResponse.Merge(m, src)
}
func (m *MsgVerifyTransferIntentProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVerifyTransferIntentProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVerifyTransferIntentProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVerifyTransferIntentProofResponse proto.InternalMessageInfo

// MsgTriggerTransferIntentTimeout represents a message to remove a transfer intent and release the posted bounty to the sender.
type MsgTriggerTransferIntentTimeout struct {
	// The sender address of the transfer intent to remove.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Unique id of the intent to verify the proof for
	IntentId uint64 `protobuf:"varint,2,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
}

func (m *MsgTriggerTransferIntentTimeout) Reset()         { *m = MsgTriggerTransferIntentTimeout{} }
func (m *MsgTriggerTransferIntentTimeout) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerTransferIntentTimeout) ProtoMessage()    {}
func (*MsgTriggerTransferIntentTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0c0bfb695dacb5, []int{4}
}
func (m *MsgTriggerTransferIntentTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerTransferIntentTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerTransferIntentTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerTransferIntentTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerTransferIntentTimeout.Merge(m, src)
}
func (m *MsgTriggerTransferIntentTimeout) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerTransferIntentTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerTransferIntentTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerTransferIntentTimeout proto.InternalMessageInfo

func (m *MsgTriggerTransferIntentTimeout) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgTriggerTransferIntentTimeout) GetIntentId() uint64 {
	if m != nil {
		return m.IntentId
	}
	return 0
}

// MsgTriggerTransferIntentTimeoutResponse is the response type for the Msg/MsgTriggerTransferIntentTimeout RPC method.
type MsgTriggerTransferIntentTimeoutResponse struct {
}

func (m *MsgTriggerTransferIntentTimeoutResponse) Reset() {
	*m = MsgTriggerTransferIntentTimeoutResponse{}
}
func (m *MsgTriggerTransferIntentTimeoutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTriggerTransferIntentTimeoutResponse) ProtoMessage()    {}
func (*MsgTriggerTransferIntentTimeoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d0c0bfb695dacb5, []int{5}
}
func (m *MsgTriggerTransferIntentTimeoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTriggerTransferIntentTimeoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTriggerTransferIntentTimeoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTriggerTransferIntentTimeoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTriggerTransferIntentTimeoutResponse.Merge(m, src)
}
func (m *MsgTriggerTransferIntentTimeoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTriggerTransferIntentTimeoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTriggerTransferIntentTimeoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTriggerTransferIntentTimeoutResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSendTransferIntent)(nil), "composable.xcvm.v1beta1.MsgSendTransferIntent")
	proto.RegisterType((*MsgSendTransferIntentResponse)(nil), "composable.xcvm.v1beta1.MsgSendTransferIntentResponse")
	proto.RegisterType((*MsgVerifyTransferIntentProof)(nil), "composable.xcvm.v1beta1.MsgVerifyTransferIntentProof")
	proto.RegisterType((*MsgVerifyTransferIntentProofResponse)(nil), "composable.xcvm.v1beta1.MsgVerifyTransferIntentProofResponse")
	proto.RegisterType((*MsgTriggerTransferIntentTimeout)(nil), "composable.xcvm.v1beta1.MsgTriggerTransferIntentTimeout")
	proto.RegisterType((*MsgTriggerTransferIntentTimeoutResponse)(nil), "composable.xcvm.v1beta1.MsgTriggerTransferIntentTimeoutResponse")
}

func init() { proto.RegisterFile("composable/xcvm/v1beta1/tx.proto", fileDescriptor_6d0c0bfb695dacb5) }

var fileDescriptor_6d0c0bfb695dacb5 = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x4f, 0x13, 0x4d,
	0x18, 0xef, 0x52, 0xe8, 0x4b, 0xa7, 0x05, 0x5e, 0xe6, 0xe5, 0x95, 0xa5, 0x40, 0x5b, 0x11, 0xa1,
	0xd6, 0xd8, 0x0d, 0x18, 0x8d, 0x31, 0x31, 0xd1, 0x7a, 0x10, 0x62, 0x9a, 0x90, 0xa5, 0xf1, 0x60,
	0x4c, 0x36, 0xfb, 0x67, 0xba, 0x9d, 0xb4, 0x3b, 0xb3, 0xd9, 0x99, 0x92, 0x36, 0xf1, 0x60, 0xfc,
	0x04, 0x7a, 0x35, 0xf1, 0x3b, 0x70, 0xf7, 0x0b, 0x70, 0xf0, 0xc0, 0xd1, 0x78, 0x20, 0x06, 0x0e,
	0x7c, 0x0d, 0xb3, 0x33, 0x53, 0xb0, 0x86, 0xad, 0x91, 0x4b, 0xb7, 0xcf, 0xef, 0xf9, 0x3d, 0xcf,
	0xfc, 0xe6, 0xf7, 0x3c, 0xdd, 0x82, 0xb2, 0x4b, 0x83, 0x90, 0x32, 0xdb, 0xe9, 0x22, 0xa3, 0xef,
	0x1e, 0x04, 0xc6, 0xc1, 0x96, 0x83, 0xb8, 0xbd, 0x65, 0xf0, 0x7e, 0x2d, 0x8c, 0x28, 0xa7, 0x70,
	0xf1, 0x92, 0x51, 0x8b, 0x19, 0x35, 0xc5, 0x28, 0xcc, 0xdb, 0x01, 0x26, 0xd4, 0x10, 0x9f, 0x92,
	0x5b, 0x58, 0x4f, 0xea, 0x86, 0x09, 0x47, 0x84, 0x2b, 0xd6, 0x46, 0x12, 0x0b, 0xf1, 0x36, 0x8a,
	0x50, 0x2f, 0x50, 0xbc, 0x45, 0x97, 0xb2, 0x80, 0x32, 0x23, 0x60, 0xbe, 0x71, 0xb0, 0x15, 0x3f,
	0x54, 0x62, 0x49, 0x26, 0x2c, 0x11, 0x19, 0x32, 0x50, 0xa9, 0x05, 0x9f, 0xfa, 0x54, 0xe2, 0xf1,
	0x37, 0x85, 0x96, 0x7c, 0x4a, 0xfd, 0x2e, 0x32, 0x44, 0xe4, 0xf4, 0x5a, 0x06, 0xc7, 0x01, 0x62,
	0xdc, 0x0e, 0x42, 0x49, 0x58, 0xfb, 0x3a, 0x01, 0xfe, 0x6f, 0x30, 0x7f, 0x1f, 0x11, 0xaf, 0x19,
	0xd9, 0x84, 0xb5, 0x50, 0xb4, 0x2b, 0x24, 0xc3, 0x1b, 0x20, 0xc3, 0x10, 0xf1, 0x50, 0xa4, 0x6b,
	0x65, 0xad, 0x92, 0x35, 0x55, 0x04, 0x0d, 0xf0, 0x9f, 0x87, 0x18, 0xc7, 0xc4, 0xe6, 0x98, 0x12,
	0xcb, 0xf6, 0xbc, 0x08, 0x31, 0xa6, 0x4f, 0x08, 0x12, 0xfc, 0x25, 0xf5, 0x4c, 0x66, 0xe0, 0x32,
	0xc8, 0xba, 0x5d, 0x8c, 0x08, 0xb7, 0xb0, 0xa7, 0xa7, 0x05, 0x6d, 0x5a, 0x02, 0xbb, 0x1e, 0xbc,
	0x0d, 0x66, 0x63, 0x49, 0xb4, 0xc7, 0xad, 0x36, 0xc2, 0x7e, 0x9b, 0xeb, 0x93, 0x65, 0xad, 0x92,
	0x36, 0x67, 0x14, 0xba, 0x23, 0x40, 0xb8, 0x07, 0xe6, 0xb8, 0x92, 0x67, 0x71, 0xda, 0x41, 0x84,
	0xe9, 0x53, 0x65, 0xad, 0x92, 0xdb, 0xde, 0xac, 0x25, 0x4c, 0xa9, 0x36, 0xbc, 0x4e, 0x53, 0xd0,
	0xcd, 0x59, 0x3e, 0x12, 0xc3, 0x17, 0x20, 0xe3, 0xd0, 0x1e, 0xe1, 0x03, 0x3d, 0x13, 0x4b, 0xaa,
	0x1b, 0x47, 0x27, 0xa5, 0xd4, 0xf7, 0x93, 0xd2, 0xa6, 0x8f, 0x79, 0xbb, 0xe7, 0xc4, 0x6d, 0x95,
	0xc1, 0xea, 0x71, 0x8f, 0x79, 0x1d, 0x83, 0x0f, 0x42, 0xc4, 0x6a, 0xcf, 0x29, 0x26, 0xa6, 0x2a,
	0x7f, 0x9c, 0x7b, 0x7f, 0x7e, 0x58, 0x55, 0xe6, 0xac, 0x95, 0xc0, 0xea, 0x95, 0x6e, 0x9a, 0x88,
	0x85, 0x94, 0x30, 0xb4, 0xf6, 0x39, 0x0d, 0x56, 0x1a, 0xcc, 0x7f, 0x85, 0x22, 0xdc, 0x1a, 0x8c,
	0x72, 0xf6, 0x22, 0x4a, 0x5b, 0x89, 0xb6, 0x2f, 0x83, 0xac, 0xdc, 0xa5, 0xd8, 0xc5, 0xd8, 0xec,
	0x49, 0x73, 0x5a, 0x02, 0xbb, 0x1e, 0x5c, 0x05, 0x80, 0xf7, 0xad, 0x08, 0xb9, 0x08, 0x87, 0x5c,
	0x78, 0x9c, 0x37, 0xb3, 0xbc, 0x6f, 0x4a, 0x00, 0xde, 0x05, 0xf3, 0x2a, 0x67, 0x31, 0xec, 0x13,
	0x9b, 0xf7, 0x22, 0x24, 0x7c, 0xce, 0x9b, 0xff, 0xaa, 0xc4, 0xfe, 0x10, 0x8f, 0x7b, 0x85, 0x3d,
	0xa7, 0x8b, 0x5d, 0xab, 0x83, 0x06, 0xc2, 0xe5, 0xbc, 0x99, 0x95, 0xc8, 0x4b, 0x34, 0x80, 0x37,
	0x41, 0xde, 0xe9, 0x52, 0xb7, 0x63, 0xb5, 0x91, 0x1d, 0xab, 0xcc, 0x08, 0x42, 0x4e, 0x60, 0x3b,
	0x02, 0x82, 0xb7, 0xc0, 0xcc, 0xf0, 0xb8, 0x30, 0xbe, 0x93, 0xfe, 0x8f, 0xe0, 0xe4, 0x15, 0x28,
	0xef, 0x59, 0x05, 0xf3, 0x0e, 0xb2, 0x5d, 0x4a, 0x2c, 0xd9, 0xce, 0xa1, 0xde, 0x40, 0x9f, 0x16,
	0xc4, 0x39, 0x99, 0xa8, 0xc7, 0x78, 0x9d, 0x7a, 0x03, 0xf8, 0x06, 0x2c, 0x8c, 0x70, 0xe5, 0xd1,
	0x4c, 0xcf, 0x96, 0xd3, 0x95, 0xdc, 0x76, 0x35, 0x71, 0x05, 0xea, 0x97, 0x7d, 0xa4, 0x34, 0x13,
	0x3a, 0xbf, 0x43, 0x6c, 0x74, 0x80, 0x1b, 0x60, 0x7d, 0xdc, 0x78, 0x2e, 0xe6, 0xe8, 0x82, 0x52,
	0x83, 0xf9, 0xcd, 0x08, 0xfb, 0x3e, 0x8a, 0x46, 0x89, 0x4d, 0xb9, 0xb9, 0xd7, 0x9a, 0xe4, 0xa8,
	0x98, 0x3b, 0x60, 0xf3, 0x0f, 0x87, 0x0c, 0xf5, 0x6c, 0x7f, 0x49, 0x83, 0x74, 0x83, 0xf9, 0xf0,
	0x2d, 0x80, 0x57, 0xfc, 0x96, 0x6b, 0x89, 0x16, 0x5d, 0xb9, 0xad, 0x85, 0x87, 0x7f, 0xc7, 0x1f,
	0xaa, 0x80, 0x1f, 0x35, 0xb0, 0x94, 0xbc, 0xda, 0x0f, 0xc6, 0x75, 0x4d, 0x2c, 0x2b, 0x3c, 0xb9,
	0x56, 0xd9, 0x85, 0xa6, 0x4f, 0x1a, 0x58, 0x19, 0x3b, 0xa7, 0x47, 0xe3, 0xfa, 0x8f, 0xab, 0x2c,
	0x3c, 0xbd, 0x6e, 0xe5, 0x50, 0x5c, 0x61, 0xea, 0xdd, 0xf9, 0x61, 0x55, 0xab, 0x6f, 0x1c, 0x9d,
	0x16, 0xb5, 0xe3, 0xd3, 0xa2, 0xf6, 0xe3, 0xb4, 0xa8, 0x7d, 0x38, 0x2b, 0xa6, 0x8e, 0xcf, 0x8a,
	0xa9, 0x6f, 0x67, 0xc5, 0xd4, 0xeb, 0x7c, 0x5f, 0xfe, 0x53, 0x88, 0x17, 0x8f, 0x93, 0x11, 0x2f,
	0xed, 0xfb, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x20, 0x15, 0x2e, 0xbd, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SendTransferIntent(ctx context.Context, in *MsgSendTransferIntent, opts ...grpc.CallOption) (*MsgSendTransferIntentResponse, error)
	VerifyTransferIntentProof(ctx context.Context, in *MsgVerifyTransferIntentProof, opts ...grpc.CallOption) (*MsgVerifyTransferIntentProofResponse, error)
	TriggerTransferIntentTimeout(ctx context.Context, in *MsgTriggerTransferIntentTimeout, opts ...grpc.CallOption) (*MsgTriggerTransferIntentTimeoutResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SendTransferIntent(ctx context.Context, in *MsgSendTransferIntent, opts ...grpc.CallOption) (*MsgSendTransferIntentResponse, error) {
	out := new(MsgSendTransferIntentResponse)
	err := c.cc.Invoke(ctx, "/composable.xcvm.v1beta1.Msg/SendTransferIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VerifyTransferIntentProof(ctx context.Context, in *MsgVerifyTransferIntentProof, opts ...grpc.CallOption) (*MsgVerifyTransferIntentProofResponse, error) {
	out := new(MsgVerifyTransferIntentProofResponse)
	err := c.cc.Invoke(ctx, "/composable.xcvm.v1beta1.Msg/VerifyTransferIntentProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TriggerTransferIntentTimeout(ctx context.Context, in *MsgTriggerTransferIntentTimeout, opts ...grpc.CallOption) (*MsgTriggerTransferIntentTimeoutResponse, error) {
	out := new(MsgTriggerTransferIntentTimeoutResponse)
	err := c.cc.Invoke(ctx, "/composable.xcvm.v1beta1.Msg/TriggerTransferIntentTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SendTransferIntent(context.Context, *MsgSendTransferIntent) (*MsgSendTransferIntentResponse, error)
	VerifyTransferIntentProof(context.Context, *MsgVerifyTransferIntentProof) (*MsgVerifyTransferIntentProofResponse, error)
	TriggerTransferIntentTimeout(context.Context, *MsgTriggerTransferIntentTimeout) (*MsgTriggerTransferIntentTimeoutResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SendTransferIntent(ctx context.Context, req *MsgSendTransferIntent) (*MsgSendTransferIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransferIntent not implemented")
}
func (*UnimplementedMsgServer) VerifyTransferIntentProof(ctx context.Context, req *MsgVerifyTransferIntentProof) (*MsgVerifyTransferIntentProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTransferIntentProof not implemented")
}
func (*UnimplementedMsgServer) TriggerTransferIntentTimeout(ctx context.Context, req *MsgTriggerTransferIntentTimeout) (*MsgTriggerTransferIntentTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerTransferIntentTimeout not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SendTransferIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendTransferIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendTransferIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composable.xcvm.v1beta1.Msg/SendTransferIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendTransferIntent(ctx, req.(*MsgSendTransferIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VerifyTransferIntentProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVerifyTransferIntentProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VerifyTransferIntentProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composable.xcvm.v1beta1.Msg/VerifyTransferIntentProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VerifyTransferIntentProof(ctx, req.(*MsgVerifyTransferIntentProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TriggerTransferIntentTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTriggerTransferIntentTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TriggerTransferIntentTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/composable.xcvm.v1beta1.Msg/TriggerTransferIntentTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TriggerTransferIntentTimeout(ctx, req.(*MsgTriggerTransferIntentTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "composable.xcvm.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransferIntent",
			Handler:    _Msg_SendTransferIntent_Handler,
		},
		{
			MethodName: "VerifyTransferIntentProof",
			Handler:    _Msg_VerifyTransferIntentProof_Handler,
		},
		{
			MethodName: "TriggerTransferIntentTimeout",
			Handler:    _Msg_TriggerTransferIntentTimeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "composable/xcvm/v1beta1/tx.proto",
}

func (m *MsgSendTransferIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendTransferIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendTransferIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bounty.Size()
		i -= size
		if _, err := m.Bounty.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.TransferTokens != nil {
		{
			size, err := m.TransferTokens.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TimeoutHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeoutHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendTransferIntentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendTransferIntentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendTransferIntentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVerifyTransferIntentProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyTransferIntentProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyTransferIntentProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BeaconBlockHeaders) > 0 {
		for iNdEx := len(m.BeaconBlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BeaconBlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BeaconBlockBody) > 0 {
		i -= len(m.BeaconBlockBody)
		copy(dAtA[i:], m.BeaconBlockBody)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BeaconBlockBody)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReceiptProof) > 0 {
		i -= len(m.ReceiptProof)
		copy(dAtA[i:], m.ReceiptProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReceiptProof)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BlockHeader) > 0 {
		i -= len(m.BlockHeader)
		copy(dAtA[i:], m.BlockHeader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHeader)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReceiptSignature) > 0 {
		i -= len(m.ReceiptSignature)
		copy(dAtA[i:], m.ReceiptSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReceiptSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxReceipt) > 0 {
		i -= len(m.TxReceipt)
		copy(dAtA[i:], m.TxReceipt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxReceipt)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IntentId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IntentId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVerifyTransferIntentProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVerifyTransferIntentProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVerifyTransferIntentProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTriggerTransferIntentTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerTransferIntentTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerTransferIntentTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IntentId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IntentId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTriggerTransferIntentTimeoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTriggerTransferIntentTimeoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTriggerTransferIntentTimeoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSendTransferIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeoutHeight != 0 {
		n += 1 + sovTx(uint64(m.TimeoutHeight))
	}
	if m.TransferTokens != nil {
		l = m.TransferTokens.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Bounty.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSendTransferIntentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVerifyTransferIntentProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IntentId != 0 {
		n += 1 + sovTx(uint64(m.IntentId))
	}
	l = len(m.TxReceipt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReceiptSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockHeader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReceiptProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BeaconBlockBody)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BeaconBlockHeaders) > 0 {
		for _, e := range m.BeaconBlockHeaders {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgVerifyTransferIntentProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTriggerTransferIntentTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IntentId != 0 {
		n += 1 + sovTx(uint64(m.IntentId))
	}
	return n
}

func (m *MsgTriggerTransferIntentTimeoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSendTransferIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendTransferIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendTransferIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			m.TimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransferTokens == nil {
				m.TransferTokens = &TransferTokens{}
			}
			if err := m.TransferTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bounty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bounty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendTransferIntentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendTransferIntentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendTransferIntentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyTransferIntentProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyTransferIntentProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyTransferIntentProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentId", wireType)
			}
			m.IntentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxReceipt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxReceipt = append(m.TxReceipt[:0], dAtA[iNdEx:postIndex]...)
			if m.TxReceipt == nil {
				m.TxReceipt = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptSignature = append(m.ReceiptSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptSignature == nil {
				m.ReceiptSignature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeader = append(m.BlockHeader[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHeader == nil {
				m.BlockHeader = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptProof = append(m.ReceiptProof[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptProof == nil {
				m.ReceiptProof = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconBlockBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconBlockBody = append(m.BeaconBlockBody[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconBlockBody == nil {
				m.BeaconBlockBody = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconBlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconBlockHeaders = append(m.BeaconBlockHeaders, &BeaconBlockHeader{})
			if err := m.BeaconBlockHeaders[len(m.BeaconBlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVerifyTransferIntentProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVerifyTransferIntentProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVerifyTransferIntentProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerTransferIntentTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerTransferIntentTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerTransferIntentTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntentId", wireType)
			}
			m.IntentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTriggerTransferIntentTimeoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTriggerTransferIntentTimeoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTriggerTransferIntentTimeoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
