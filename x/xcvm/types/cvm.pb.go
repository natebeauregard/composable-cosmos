// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: composable/xcvm/v1beta1/cvm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: add "CVM" prefix to all of these messages
type Instruction struct {
	// Types that are valid to be assigned to Instruction:
	//	*Instruction_Spawn
	Instruction isInstruction_Instruction `protobuf_oneof:"instruction"`
}

func (m *Instruction) Reset()         { *m = Instruction{} }
func (m *Instruction) String() string { return proto.CompactTextString(m) }
func (*Instruction) ProtoMessage()    {}
func (*Instruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ef6efe9b9e6968, []int{0}
}
func (m *Instruction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instruction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Instruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instruction.Merge(m, src)
}
func (m *Instruction) XXX_Size() int {
	return m.Size()
}
func (m *Instruction) XXX_DiscardUnknown() {
	xxx_messageInfo_Instruction.DiscardUnknown(m)
}

var xxx_messageInfo_Instruction proto.InternalMessageInfo

type isInstruction_Instruction interface {
	isInstruction_Instruction()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Instruction_Spawn struct {
	Spawn *SpawnInstruction `protobuf:"bytes,1,opt,name=spawn,proto3,oneof" json:"spawn,omitempty"`
}

func (*Instruction_Spawn) isInstruction_Instruction() {}

func (m *Instruction) GetInstruction() isInstruction_Instruction {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (m *Instruction) GetSpawn() *SpawnInstruction {
	if x, ok := m.GetInstruction().(*Instruction_Spawn); ok {
		return x.Spawn
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Instruction) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Instruction_Spawn)(nil),
	}
}

type Program struct {
	Instructions []*Instruction `protobuf:"bytes,1,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ef6efe9b9e6968, []int{1}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(m, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

func (m *Program) GetInstructions() []*Instruction {
	if m != nil {
		return m.Instructions
	}
	return nil
}

type Asset struct {
	AssetId uint64 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// TODO: use Balance message instead of uint64
	Balance uint64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ef6efe9b9e6968, []int{2}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *Asset) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type SpawnInstruction struct {
	OriginNetwork uint32   `protobuf:"varint,1,opt,name=origin_network,json=originNetwork,proto3" json:"origin_network,omitempty"`
	Salt          uint32   `protobuf:"varint,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Program       *Program `protobuf:"bytes,3,opt,name=program,proto3" json:"program,omitempty"`
	Assets        []*Asset `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (m *SpawnInstruction) Reset()         { *m = SpawnInstruction{} }
func (m *SpawnInstruction) String() string { return proto.CompactTextString(m) }
func (*SpawnInstruction) ProtoMessage()    {}
func (*SpawnInstruction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ef6efe9b9e6968, []int{3}
}
func (m *SpawnInstruction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpawnInstruction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpawnInstruction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpawnInstruction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpawnInstruction.Merge(m, src)
}
func (m *SpawnInstruction) XXX_Size() int {
	return m.Size()
}
func (m *SpawnInstruction) XXX_DiscardUnknown() {
	xxx_messageInfo_SpawnInstruction.DiscardUnknown(m)
}

var xxx_messageInfo_SpawnInstruction proto.InternalMessageInfo

func (m *SpawnInstruction) GetOriginNetwork() uint32 {
	if m != nil {
		return m.OriginNetwork
	}
	return 0
}

func (m *SpawnInstruction) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *SpawnInstruction) GetProgram() *Program {
	if m != nil {
		return m.Program
	}
	return nil
}

func (m *SpawnInstruction) GetAssets() []*Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func init() {
	proto.RegisterType((*Instruction)(nil), "composable.xcvm.v1beta1.Instruction")
	proto.RegisterType((*Program)(nil), "composable.xcvm.v1beta1.Program")
	proto.RegisterType((*Asset)(nil), "composable.xcvm.v1beta1.Asset")
	proto.RegisterType((*SpawnInstruction)(nil), "composable.xcvm.v1beta1.SpawnInstruction")
}

func init() { proto.RegisterFile("composable/xcvm/v1beta1/cvm.proto", fileDescriptor_d8ef6efe9b9e6968) }

var fileDescriptor_d8ef6efe9b9e6968 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x3d, 0x4f, 0x83, 0x40,
	0x18, 0xc7, 0xc1, 0xbe, 0x60, 0x1e, 0x8a, 0x31, 0x17, 0x13, 0xb1, 0x03, 0x56, 0xa2, 0xa6, 0x2e,
	0x90, 0xd6, 0xc4, 0xc1, 0xb8, 0xb4, 0x53, 0xbb, 0x18, 0x43, 0x37, 0x97, 0xe6, 0xa0, 0x27, 0x21,
	0x02, 0x47, 0xb8, 0xeb, 0x8b, 0xdf, 0xc2, 0xaf, 0xe4, 0xe6, 0xd8, 0xd1, 0xd1, 0xb4, 0x5f, 0xc4,
	0x70, 0x87, 0x69, 0x35, 0x61, 0x7b, 0x5e, 0x7e, 0xff, 0xe7, 0xed, 0x0e, 0x2e, 0x02, 0x9a, 0x64,
	0x94, 0x61, 0x3f, 0x26, 0xee, 0x2a, 0x58, 0x24, 0xee, 0xa2, 0xe7, 0x13, 0x8e, 0x7b, 0x6e, 0xb0,
	0x48, 0x9c, 0x2c, 0xa7, 0x9c, 0xa2, 0xd3, 0x1d, 0xe2, 0x14, 0x88, 0x53, 0x22, 0xed, 0x93, 0x90,
	0x86, 0x54, 0x30, 0x6e, 0x61, 0x49, 0xbc, 0x7d, 0x1e, 0x52, 0x1a, 0xc6, 0xc4, 0x15, 0x9e, 0x3f,
	0x7f, 0x71, 0x79, 0x94, 0x10, 0xc6, 0x71, 0x92, 0x49, 0xc0, 0x9e, 0x82, 0x3e, 0x4e, 0x19, 0xcf,
	0xe7, 0x01, 0x8f, 0x68, 0x8a, 0x06, 0xd0, 0x60, 0x19, 0x5e, 0xa6, 0xa6, 0xda, 0x51, 0xbb, 0x7a,
	0xff, 0xc6, 0xa9, 0x68, 0xe7, 0x4c, 0x0a, 0x6a, 0x4f, 0x39, 0x52, 0x3c, 0xa9, 0x1c, 0x1a, 0xa0,
	0x47, 0xbb, 0xb8, 0x3d, 0x01, 0xed, 0x29, 0xa7, 0x61, 0x8e, 0x13, 0x34, 0x82, 0xd6, 0x5e, 0x86,
	0x99, 0x6a, 0xa7, 0xd6, 0xd5, 0xfb, 0x97, 0x95, 0x3d, 0xf6, 0xca, 0x7b, 0x7f, 0x94, 0xf6, 0x03,
	0x34, 0x06, 0x8c, 0x11, 0x8e, 0xce, 0xe0, 0x10, 0x17, 0xc6, 0x34, 0x9a, 0x89, 0x91, 0xeb, 0x9e,
	0x26, 0xfc, 0xf1, 0x0c, 0x99, 0xa0, 0xf9, 0x38, 0xc6, 0x69, 0x40, 0xcc, 0x03, 0x99, 0x29, 0x5d,
	0xfb, 0x43, 0x85, 0xe3, 0xff, 0xf3, 0xa3, 0x2b, 0x38, 0xa2, 0x79, 0x14, 0x46, 0xe9, 0x34, 0x25,
	0x7c, 0x49, 0xf3, 0x57, 0x51, 0xcf, 0xf0, 0x0c, 0x19, 0x7d, 0x94, 0x41, 0x84, 0xa0, 0xce, 0x70,
	0xcc, 0x45, 0x49, 0xc3, 0x13, 0x36, 0xba, 0x07, 0x2d, 0x93, 0x2b, 0x9a, 0x35, 0x71, 0xb6, 0x4e,
	0xe5, 0x4a, 0xe5, 0x29, 0xbc, 0x5f, 0x01, 0xba, 0x83, 0xa6, 0x18, 0x98, 0x99, 0x75, 0x71, 0x0d,
	0xab, 0x52, 0x2a, 0x16, 0xf6, 0x4a, 0x7a, 0x78, 0xfd, 0xb9, 0xb1, 0xd4, 0xf5, 0xc6, 0x52, 0xbf,
	0x37, 0x96, 0xfa, 0xbe, 0xb5, 0x94, 0xf5, 0xd6, 0x52, 0xbe, 0xb6, 0x96, 0xf2, 0xdc, 0x5a, 0xc9,
	0xbf, 0xc3, 0xdf, 0x32, 0xc2, 0xfc, 0xa6, 0x78, 0xe6, 0xdb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc6, 0x10, 0xa0, 0xe3, 0x5b, 0x02, 0x00, 0x00,
}

func (m *Instruction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instruction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Instruction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Instruction != nil {
		{
			size := m.Instruction.Size()
			i -= size
			if _, err := m.Instruction.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Instruction_Spawn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Instruction_Spawn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Spawn != nil {
		{
			size, err := m.Spawn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Program) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Instructions) > 0 {
		for iNdEx := len(m.Instructions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instructions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCvm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != 0 {
		i = encodeVarintCvm(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x10
	}
	if m.AssetId != 0 {
		i = encodeVarintCvm(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpawnInstruction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpawnInstruction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpawnInstruction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCvm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Program != nil {
		{
			size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCvm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Salt != 0 {
		i = encodeVarintCvm(dAtA, i, uint64(m.Salt))
		i--
		dAtA[i] = 0x10
	}
	if m.OriginNetwork != 0 {
		i = encodeVarintCvm(dAtA, i, uint64(m.OriginNetwork))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCvm(dAtA []byte, offset int, v uint64) int {
	offset -= sovCvm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Instruction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Instruction != nil {
		n += m.Instruction.Size()
	}
	return n
}

func (m *Instruction_Spawn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spawn != nil {
		l = m.Spawn.Size()
		n += 1 + l + sovCvm(uint64(l))
	}
	return n
}
func (m *Program) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Instructions) > 0 {
		for _, e := range m.Instructions {
			l = e.Size()
			n += 1 + l + sovCvm(uint64(l))
		}
	}
	return n
}

func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovCvm(uint64(m.AssetId))
	}
	if m.Balance != 0 {
		n += 1 + sovCvm(uint64(m.Balance))
	}
	return n
}

func (m *SpawnInstruction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginNetwork != 0 {
		n += 1 + sovCvm(uint64(m.OriginNetwork))
	}
	if m.Salt != 0 {
		n += 1 + sovCvm(uint64(m.Salt))
	}
	if m.Program != nil {
		l = m.Program.Size()
		n += 1 + l + sovCvm(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovCvm(uint64(l))
		}
	}
	return n
}

func sovCvm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCvm(x uint64) (n int) {
	return sovCvm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Instruction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SpawnInstruction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Instruction = &Instruction_Spawn{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = append(m.Instructions, &Instruction{})
			if err := m.Instructions[len(m.Instructions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpawnInstruction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCvm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpawnInstruction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpawnInstruction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginNetwork", wireType)
			}
			m.OriginNetwork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginNetwork |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Program == nil {
				m.Program = &Program{}
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCvm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCvm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCvm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCvm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCvm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCvm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCvm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCvm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCvm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCvm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCvm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCvm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCvm = fmt.Errorf("proto: unexpected end of group")
)
