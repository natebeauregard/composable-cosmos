syntax = "proto3";
package composable.xcvm.v1beta1;

import "amino/amino.proto";
import "composable/xcvm/v1beta1/intent.proto";
import "composable/xcvm/v1beta1/ethereum.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "x/xcvm/types";

// Msg defines the x/xcvm Msg service.
service Msg {
    option (cosmos.msg.v1.service) = true;

    rpc SendTransferIntent(MsgSendTransferIntent)
      returns (MsgSendTransferIntentResponse);

    rpc VerifyTransferIntentProof(MsgVerifyTransferIntentProof)
      returns (MsgVerifyTransferIntentProofResponse);

    rpc TriggerTransferIntentTimeout(MsgTriggerTransferIntentTimeout)
        returns (MsgTriggerTransferIntentTimeoutResponse);
}

// MsgSendTransferIntent represents a message to send a transfer intent.
message MsgSendTransferIntent {
    option (cosmos.msg.v1.signer) = "from_address";

    // The origin composable address of the transfer intent.
    string from_address = 1;
    // The destination EVM chain address for the transfer intent.
    string destination_address = 2;
    // The IBC light client ID for the EVM chain to execute the transfer intent on.
    string client_id = 3;
    // The block height timeout for the transfer intent. The transfer intent can be released and the bounty can be returned to the sender after this height.
    int64 timeout_height = 4;
    // The tokens to transfer to the destination address.
    TransferTokens transfer_tokens = 5;
    // The bounty to post for incentivizing solvers to execute the transfer intent.
    string bounty = 6 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
        (gogoproto.nullable) = false
    ];
}

// MsgSendTransferIntentResponse is the response type for the Msg/SendTransferIntent RPC method.
message MsgSendTransferIntentResponse {}

// MsgVerifyTransferIntentProof represents a message to send a proof to verify
// the successful execution of a transfer intent.
message MsgVerifyTransferIntentProof {
    option (cosmos.msg.v1.signer) = "signer";

    // The signer address of the transfer intent proof to verify.
    string signer = 1;
    // Unique id of the intent to verify the proof for
    uint64 intent_id = 2;
    // the transaction receipt containing the transfer intent execution.
    bytes tx_receipt = 3;
    // the signature of the receipt hash and block hash containing the transfer intent execution.
    bytes receipt_signature = 4;
    // the public key of the solver executing the transfer intent.
    bytes public_key = 5;
    // the execution block header of the block containing the transfer intent execution.
    bytes block_header = 6;
    // the proof of the receipt in the block.
    bytes receipt_proof = 7;
    // the body of the beacon block containing the transfer intent execution.
    bytes beacon_block_body = 8;
    // all beacon block headers from the block where the transfer intent was executed up to block in the current light client state.
    repeated BeaconBlockHeader beacon_block_headers = 9;
}

// MsgVerifyTransferIntentProofResponse is the response type for the Msg/MsgVerifyTransferIntentProof RPC method.
message MsgVerifyTransferIntentProofResponse {}

// MsgTriggerTransferIntentTimeout represents a message to remove a transfer intent and release the posted bounty to the sender.
message MsgTriggerTransferIntentTimeout {
    option (cosmos.msg.v1.signer) = "sender";

    // The sender address of the transfer intent to remove.
    string sender = 1;
    // Unique id of the intent to verify the proof for
    uint64 intent_id = 2;
}

// MsgTriggerTransferIntentTimeoutResponse is the response type for the Msg/MsgTriggerTransferIntentTimeout RPC method.
message MsgTriggerTransferIntentTimeoutResponse {}
