syntax = "proto3";
package composable.xcvm.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "x/xcvm/types";

message LightClientState {
    BeaconBlockHeader finalized_header = 1;
    uint64 latest_finalized_epoch = 2;
    bytes current_sync_committee = 3;
    bytes next_sync_committee = 4;
    uint64 statePeriod = 5;
}

message ClientState {
    LightClientState inner = 1;
    bytes frozen_height = 2;
    uint32 latest_height = 3;
    string ibc_core_address = 4;
    uint64 next_upgrade_id = 5;
    bytes _phantom = 6;
}

message ConsensusState {
    // timestamp that corresponds to the block height in which the ConsensusState
    // was stored.
    bytes time = 1;
    // packet commitment root
    bytes root = 2;
  }

// Eth1Data represents references to the Ethereum 1.x deposit contract.
message Eth1Data {
    // The 32 byte deposit tree root for the last deposit included in this
    // block.
    bytes deposit_root = 1;

    // The total number of deposits included in the beacon chain since genesis
    // including the deposits in this block.
    uint64 deposit_count = 2;

    // The 32 byte block hash of the Ethereum 1.x block considered for deposit
    // inclusion.
    bytes block_hash = 3;
}

// A beacon block header is essentially a beacon block with only a reference to
// the beacon body as a 32 byte merkle tree root. This type of message is more
// lightweight than a full beacon block. The message does not contain
// a validator signature.
message BeaconBlockHeader {
    // Beacon chain slot that this block represents.
    uint64 slot = 1;

    // Validator index of the validator that proposed the block header.
    uint64 proposer_index = 2;

    // 32 byte merkle tree root of the parent ssz encoded block.
    bytes parent_root = 3;

    // 32 byte merkle tree root of the resulting ssz encoded state after processing this block.
    bytes state_root = 4;

    // 32 byte merkle tree root of the ssz encoded block body.
    bytes body_root = 5;
}

// The block body of an Ethereum consensus beacon block.
message BeaconBlockBody {
  // The validators RANDAO reveal 96 byte value.
  bytes randao_reveal = 1;

  // A reference to the Ethereum 1.x chain.
  Eth1Data eth1_data = 2;

  // 32 byte field of arbitrary data. This field may contain any data and
  // is not used for anything other than a fun message.
  bytes graffiti = 3;

  // Block operations
  // Refer to spec constants at https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#max-operations-per-block

  // At most MAX_PROPOSER_SLASHINGS.
  repeated bytes proposer_slashings = 4;

  // At most MAX_ATTESTER_SLASHINGS.
  repeated bytes attester_slashings = 5;

  // At most MAX_ATTESTATIONS.
  repeated bytes attestations = 6;

  // At most MAX_DEPOSITS.
  repeated bytes deposits = 7;

  // At most MAX_VOLUNTARY_EXITS.
  repeated bytes voluntary_exits = 8;
}
