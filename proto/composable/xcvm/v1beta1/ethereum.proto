syntax = "proto3";
package composable.xcvm.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "x/xcvm/types";

message ClientState {
  LightClientState inner = 1;
  optional uint64 frozen_height_revision_height = 2;
  optional uint64 frozen_height_revision_number = 3;
  uint64 latest_height = 4;
}

message SyncCommittee {
  repeated bytes public_keys = 1;
  bytes aggregate_public_key = 2;
}

message LightClientState {
  BeaconBlockHeader finalized_header = 1;
  uint64 latest_finalized_epoch = 2;
  SyncCommittee current_sync_committee = 3;
  SyncCommittee next_sync_committee = 4;
}

// A beacon block header is essentially a beacon block with only a reference to
// the beacon body as a 32 byte merkle tree root. This type of message is more
// lightweight than a full beacon block. The message does not contain
// a validator signature.
message BeaconBlockHeader {
    // Beacon chain slot that this block represents.
    uint64 slot = 1;

    // Validator index of the validator that proposed the block header.
    uint64 proposer_index = 2;

    // 32 byte merkle tree root of the parent ssz encoded block.
    bytes parent_root = 3;

    // 32 byte merkle tree root of the resulting ssz encoded state after processing this block.
    bytes state_root = 4;

    // 32 byte merkle tree root of the ssz encoded block body.
    bytes body_root = 5;
}

message ReceiptProof {
    map<string, bytes> proof = 1;
}

message LightClientUpdate {
  BeaconBlockHeader attested_header = 1;
  optional SyncCommitteeUpdate sync_committee_update = 2;
  BeaconBlockHeader finalized_header = 3;
  ExecutionPayloadProof execution_payload = 4;
  FinalityProof finality_proof = 5;
  SyncAggregate sync_aggregate = 6;
  uint64 signature_slot = 7;
}

message SyncCommitteeUpdate {
  SyncCommittee next_sync_committee = 1;
  repeated bytes next_sync_committee_branch = 2;
}

message ExecutionPayloadProof {
  bytes state_root = 1;
  uint64 block_number = 2;
  repeated bytes multi_proof = 3;
  repeated bytes execution_payload_branch = 4;
  uint64 timestamp = 5;
}

message FinalityProof {
  uint64 epoch = 1;
  repeated bytes finality_branch = 2;
}

message SyncAggregate {
  bytes sync_committee_bits = 1;
  bytes sync_committee_signature = 2;
}
